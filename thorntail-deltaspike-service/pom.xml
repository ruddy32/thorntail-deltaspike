<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.timm.thorntail</groupId>
		<artifactId>soa-service-parent</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../soa-service-parent</relativePath>
	</parent>

	<artifactId>thorntail-deltaspike-service</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>${project.artifactId}</name>
	<description>Thorntail / Deltaspike service</description>

	<properties>
		<!-- fix thorntail packaging bug  -->
		<h2.version>1.4.197</h2.version>
		<postgresql.version>42.2.4</postgresql.version>
		
		<cxf.wadl.outputPath>${basedir}/target/generated/cxf/wadl</cxf.wadl.outputPath>
		
		<!-- Arquillian (copy from soa-bom maven project properties) -->
        <arquillian-graphene.version>2.3.2</arquillian-graphene.version>
	</properties>

	<dependencies>
		<!-- Persistence -->
		<!-- <dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<scope>provided</scope>
		</dependency> -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>jpa</artifactId>
		</dependency>

		<!-- Deltaspike modules -->
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-data-module-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-data-module-impl</artifactId>
		</dependency>

		<!-- Bean Validation Implementation -->
		<!-- Provides portable constraints such as @NotEmpty, @Email and @Url -->
		<!-- Hibernate Validator is only the JSR-303 implementation at the moment, so we can assume it's provided -->
		<!-- 
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.jboss.logging</groupId>
					<artifactId>jboss-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		 -->

		<!-- Appache commons -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<!-- Selma Bean Mapping -->
		<dependency>
		    <groupId>fr.xebia.extras</groupId>
		    <artifactId>selma-processor</artifactId>
		</dependency>
		<dependency>
		    <groupId>fr.xebia.extras</groupId>
		    <artifactId>selma</artifactId>
		</dependency>
        
		<!-- CAA SOA modules -->
		
		<!-- Test -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
        <!-- Specify the artifact name, this is referred to in the EAR's application.xml -->
        <finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/resources-thorntail</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
			<testResource>
				<directory>src/test/resources-thorntail</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<archive>
						<!-- Don't forget the Implementation Version -->
						<manifestEntries>
							<Specification-Title>${project.description}</Specification-Title>
							<Specification-Version>1.0</Specification-Version>
							<Implementation-Title>${project.name}</Implementation-Title>
							<Implementation-Version>${project.version}</Implementation-Version>
							<Implementation-Vendor>${project.organization.name}</Implementation-Vendor>
							<Implementation-URL>${project.url}</Implementation-URL>
							<Build-Label>${project.version}</Build-Label>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
            <plugin>
				<groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>install</goal>
                        </goals>
                        <configuration>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>${project.artifactId}</artifactId>
                            <version>${project.version}</version>
                            <packaging>wadl</packaging>
                            <file>${cxf.wadl.outputPath}/ISecurity.wadl</file>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-java2wadl-plugin</artifactId>
				<executions>
					<execution>
						<id>process-classes</id>
						<phase>process-classes</phase>
						<goals>
							<goal>java2wadl</goal>
						</goals>
						<configuration>
							<skip>true</skip>
							<applicationTitle>${project.name} ${project.version}</applicationTitle>
							<namespacePrefix>architect10</namespacePrefix>
							<incrementNamespacePrefix>false</incrementNamespacePrefix>
							<linkAnyMediaTypeToXmlSchema>true</linkAnyMediaTypeToXmlSchema>
							<useJaxbContextForQnames>true</useJaxbContextForQnames>
							<addResourceAndMethodIds>true</addResourceAndMethodIds>
							<usePathParamsToCompareOperations>false</usePathParamsToCompareOperations>
							<classResourceNames>
								<classResourceName>com.timm.demo.thorntail.deltaspike.api.ISecurity</classResourceName>
							</classResourceNames>
							<!-- Enable if support for Javadoc is required, not supported in CXF 2.7.11 -->
							<!-- <docProvider>org.apache.cxf.maven_plugin.javatowadl.ResourceMapJavaDocProvider</docProvider> -->
							<attachWadl>true</attachWadl>
							<outputFile>${cxf.wadl.outputPath}/ISecurity.wadl</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

    <profiles>
        <profile>
			<id>skipTests</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${surefire.plugin.version}</version>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
				</plugins>
			</build>
        </profile>
        <profile>
			<id>formatCode</id>
			<build>
				<plugins>
					<plugin>
						<groupId>net.revelc.code</groupId>
						<artifactId>formatter-maven-plugin</artifactId>
						<configuration>
							<configFile>../src/format/eclipse-formatter-config.xml</configFile>
						</configuration>
					</plugin>
				</plugins>
			</build>
        </profile>
		<profile>
			<!-- Profile used to publish documentation and site under staging folder. -->
			<id>staging</id>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-scm-publish-plugin</artifactId>
							<version>1.1</version>
							<configuration>
								<pubScmUrl>scm:svn:${svn.scmPubUrlStaging}</pubScmUrl>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
		<profile>
			<!-- It disables javadoc doclint for JDK > 8 -->
			<id>javadoc-xdoclint-disable-jdk8+</id>
			<activation>
				<jdk>[1.8,)</jdk>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-javadoc-plugin</artifactId>
							<configuration>
								<additionalJOption>-Xdoclint:none</additionalJOption>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
		<profile>
			<id>coverage</id>
			<!-- * Activate this profile to gather unit test coverage * Start with: * $> mvn clean install -Pcoverage * The generated 
				information will be in target/site/jacoco/index.html -->
			<properties>
				<arquillian-jacoco.version>1.0.0.Alpha7</arquillian-jacoco.version>
				<jacoco.version>0.8.0</jacoco.version>
			</properties>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.extension</groupId>
					<artifactId>arquillian-jacoco</artifactId>
					<version>${arquillian-jacoco.version}</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.jacoco</groupId>
					<artifactId>org.jacoco.core</artifactId>
					<version>${jacoco.version}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco.version}</version>
						<configuration>
							<propertyName>jacoco.agent</propertyName>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>fabric8-maven-plugin</artifactId>
                        <configuration>
                            <mode>kubernetes</mode>
                            <images>
                                <image>
                                    <name>${docker.user}/${project.artifactId}:${project.version}</name>
                                    <build>
                                        <from>jboss/base-jdk:8</from>
                                        <maintainer>TIMM</maintainer>
                                        <assembly>
                                            <basedir>${project.build.directory}/deployment</basedir>
                                            <descriptorRef>artifact</descriptorRef>
                                        </assembly>
                                    </build>
                                    <watch>
                                        <interval>5000</interval>
                                    </watch>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>resource</goal>
                                    <goal>build</goal>
                                    <!--<goal>deploy</goal>-->
                                </goals>
                            </execution>
                        </executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
